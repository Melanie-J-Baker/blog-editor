/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPosts: () => (/* binding */ createPosts),\n/* harmony export */   deletePost: () => (/* binding */ deletePost),\n/* harmony export */   login: () => (/* binding */ login),\n/* harmony export */   showPost: () => (/* binding */ showPost),\n/* harmony export */   signup: () => (/* binding */ signup),\n/* harmony export */   submitCommentForm: () => (/* binding */ submitCommentForm)\n/* harmony export */ });\n/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render */ \"./src/render.js\");\n\n\nlet contentDiv = document.getElementById(\"content\");\nlet posts = [];\nlet comments = [];\nlet post;\n\nasync function signup(e, username, password) {\n  e.preventDefault();\n  await fetch(\"http://localhost:3000/blog/signup/\", {\n    mode: \"cors\",\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    },\n    body: new URLSearchParams({\n      username: username.toString(),\n      password: password.toString(),\n    }),\n  })\n    .then(function (response) {\n      if (response.ok) {\n        const data = response.json();\n        return data;\n      } else {\n        throw new Error(\"Something went wrong!\");\n      }\n    })\n    .then(function (data) {\n      return data;\n    })\n    .catch(function (err) {\n      //Failure\n      alert(\"Error: err\");\n    });\n}\n\nasync function login(e, username, password) {\n  e.preventDefault();\n  await fetch(\"http://localhost:3000/blog/login/\", {\n    mode: \"cors\",\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    },\n    body: new URLSearchParams({\n      username: username.toString(),\n      password: password.toString(),\n    }),\n  })\n    .then(function (response) {\n      if (response.ok) {\n        const data = response.json();\n        return data;\n      } else {\n        throw new Error(\"Something went wrong\");\n      }\n    })\n    .then(function (data) {\n      let inMemoryToken = data.token;\n      localStorage.setItem(\"user\", username);\n      localStorage.setItem(\"token\", inMemoryToken);\n      contentDiv.textContent = username + \" is logged in\";\n      setTimeout(() => {\n        createPosts();\n      }, 3000);\n    })\n    .catch(function (err) {\n      //Failure\n      alert(\"Something went wrong!\");\n    });\n}\n\nasync function fetchPosts() {\n  try {\n    const response = await fetch(\"http://localhost:3000/blog/posts\", {\n      mode: \"cors\",\n    });\n    if (response.ok) {\n      posts = await response.json();\n    } else {\n      throw new Error(\n        JSON.stringify({ code: response.status, message: response.statusText })\n      );\n    }\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function fetchPost(id) {\n  try {\n    const response = await fetch(\"http://localhost:3000/blog/posts/\" + id, {\n      mode: \"cors\",\n    });\n    if (response.ok) {\n      post = await response.json();\n    } else {\n      throw new Error(\n        JSON.stringify({\n          code: response.status,\n          message: response.statusText,\n        })\n      );\n    }\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function fetchComments(id) {\n  try {\n    const response = await fetch(\n      \"http://localhost:3000/blog/posts/\" + id + \"/comments\",\n      {\n        mode: \"cors\",\n      }\n    );\n    if (response.ok) {\n      comments = await response.json();\n    } else {\n      throw new Error(\n        JSON.stringify({\n          code: response.status,\n          message: response.statusText,\n        })\n      );\n    }\n  } catch (error) {\n    alert(error);\n  }\n}\n\nasync function submitCommentForm(e, id, text, username) {\n  e.preventDefault();\n  await fetch(\"http://localhost:3000/blog/posts/\" + id + \"/comments/\", {\n    mode: \"cors\",\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    },\n    body: new URLSearchParams({\n      text: text.toString(),\n      username: username.toString(),\n    }),\n  })\n    .then(function (response) {\n      const data = response.json();\n      return data;\n    })\n    .then(function (data) {\n      showPost(data.post);\n      if (text) {\n        alert(\"Comment created: \" + text);\n      }\n      return;\n    })\n    .catch(function (err) {\n      //Failure\n      alert(\"Error: err\");\n    });\n}\n\nasync function showPost(id) {\n  contentDiv.textContent = \"\";\n  await fetchPost(id);\n  await fetchComments(id);\n  (0,_render__WEBPACK_IMPORTED_MODULE_0__.renderPost)(post, comments);\n  (0,_render__WEBPACK_IMPORTED_MODULE_0__.userStatusDisplay)();\n}\n\nasync function createPosts() {\n  contentDiv.textContent = \"\";\n  await fetchPosts();\n  (0,_render__WEBPACK_IMPORTED_MODULE_0__.renderPosts)(posts);\n  (0,_render__WEBPACK_IMPORTED_MODULE_0__.userStatusDisplay)();\n}\n\nasync function deletePost(id) {\n  let inMemoryToken = localStorage.getItem(\"token\");\n  try {\n    const response = await fetch(\n      \"http://localhost:3000/blog/posts/\" +\n        id +\n        \"/?\" +\n        new URLSearchParams({\n          secret_token: inMemoryToken,\n        }),\n      {\n        mode: \"cors\",\n        method: \"delete\",\n        headers: {\n          Authorization: `Bearer ${inMemoryToken}`,\n        },\n      }\n    );\n    if (response.ok) {\n      let result = await response.json();\n      contentDiv.textContent = JSON.stringify(result);\n      setTimeout(() => {\n        createPosts();\n      }, 3000);\n    } else {\n      throw new Error(\n        JSON.stringify({\n          code: response.status,\n          message: response.statusText,\n        })\n      );\n    }\n  } catch (error) {\n    alert(error);\n  }\n}\n\n(0,_render__WEBPACK_IMPORTED_MODULE_0__.addBtnEventListeners)();\ncreatePosts();\n\n\n\n\n//# sourceURL=webpack://blog-editor/./src/index.js?");

/***/ }),

/***/ "./src/render.js":
/*!***********************!*\
  !*** ./src/render.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addBtnEventListeners: () => (/* binding */ addBtnEventListeners),\n/* harmony export */   renderPost: () => (/* binding */ renderPost),\n/* harmony export */   renderPosts: () => (/* binding */ renderPosts),\n/* harmony export */   userStatusDisplay: () => (/* binding */ userStatusDisplay)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./src/index.js\");\n\n\nlet contentDiv = document.getElementById(\"content\");\n\nfunction addBtnEventListeners() {\n  let signupBtn = document.getElementById(\"signupBtn\");\n  signupBtn.addEventListener(\"click\", () => {\n    signupForm();\n  });\n  let loginBtn = document.getElementById(\"loginBtn\");\n  loginBtn.addEventListener(\"click\", () => {\n    loginForm();\n  });\n}\n\nfunction userStatusDisplay() {\n  let userStatusDiv = document.getElementById(\"userStatus\");\n  let user = localStorage.getItem(\"user\");\n  if (user) {\n    userStatusDiv.textContent = \"Logged in as \" + user;\n  }\n}\n\nfunction signupForm() {\n  contentDiv.textContent = \"\";\n  let signupForm = document.createElement(\"form\");\n  let usernameDiv = document.createElement(\"div\");\n  let usernameLabel = document.createElement(\"label\");\n  let usernameInput = document.createElement(\"input\");\n  let passwordDiv = document.createElement(\"div\");\n  let passwordLabel = document.createElement(\"label\");\n  let passwordInput = document.createElement(\"input\");\n  let submitBtn = document.createElement(\"button\");\n  signupForm.id = \"signupForm\";\n  signupForm.method = \"POST\";\n  signupForm.action = \"http://localhost:3000/blog/signup/\";\n  signupForm.onsubmit = (e) => {\n    let username = usernameInput.value;\n    let password = passwordInput.value;\n    (0,_index__WEBPACK_IMPORTED_MODULE_0__.signup)(e, username, password);\n    contentDiv.textContent = \"User created: \" + username;\n    setTimeout(() => {\n      (0,_index__WEBPACK_IMPORTED_MODULE_0__.createPosts)();\n    }, 3000);\n  };\n  usernameLabel.htmlFor = \"username\";\n  usernameLabel.textContent = \"Username: \";\n  usernameLabel.className = \"signupLabel\";\n  usernameInput.id = \"username\";\n  usernameInput.type = \"text\";\n  usernameInput.name = \"username\";\n  passwordLabel.htmlFor = \"password\";\n  passwordLabel.textContent = \"Password: \";\n  passwordLabel.className = \"signupLabel\";\n  passwordInput.id = \"password\";\n  passwordInput.type = \"text\";\n  passwordInput.name = \"password\";\n  submitBtn.type = \"submit\";\n  submitBtn.class = \"submitBtn\";\n  submitBtn.textContent = \"Create account\";\n  usernameDiv.appendChild(usernameLabel);\n  usernameDiv.appendChild(usernameInput);\n  signupForm.appendChild(usernameDiv);\n  passwordDiv.appendChild(passwordLabel);\n  passwordDiv.appendChild(passwordInput);\n  signupForm.appendChild(passwordDiv);\n  signupForm.appendChild(submitBtn);\n  contentDiv.appendChild(signupForm);\n}\n\nfunction loginForm() {\n  contentDiv.textContent = \"\";\n  let loginForm = document.createElement(\"form\");\n  let usernameDiv = document.createElement(\"div\");\n  let usernameLabel = document.createElement(\"label\");\n  let usernameInput = document.createElement(\"input\");\n  let passwordDiv = document.createElement(\"div\");\n  let passwordLabel = document.createElement(\"label\");\n  let passwordInput = document.createElement(\"input\");\n  let submitBtn = document.createElement(\"button\");\n  loginForm.id = \"loginForm\";\n  loginForm.method = \"POST\";\n  loginForm.action = \"http://localhost:3000/blog/login/\";\n  loginForm.onsubmit = (e) => {\n    let username = usernameInput.value;\n    let password = passwordInput.value;\n    (0,_index__WEBPACK_IMPORTED_MODULE_0__.login)(e, username, password);\n  };\n  usernameLabel.htmlFor = \"username\";\n  usernameLabel.textContent = \"Username: \";\n  usernameLabel.className = \"loginLabel\";\n  usernameInput.id = \"username\";\n  usernameInput.type = \"text\";\n  usernameInput.name = \"username\";\n  passwordLabel.htmlFor = \"password\";\n  passwordLabel.textContent = \"Password: \";\n  passwordLabel.className = \"loginLabel\";\n  passwordInput.id = \"password\";\n  passwordInput.type = \"text\";\n  passwordInput.name = \"password\";\n  submitBtn.type = \"submit\";\n  submitBtn.class = \"submitBtn\";\n  submitBtn.textContent = \"Log in\";\n  usernameDiv.appendChild(usernameLabel);\n  usernameDiv.appendChild(usernameInput);\n  loginForm.appendChild(usernameDiv);\n  passwordDiv.appendChild(passwordLabel);\n  passwordDiv.appendChild(passwordInput);\n  loginForm.appendChild(passwordDiv);\n  loginForm.appendChild(submitBtn);\n  contentDiv.appendChild(loginForm);\n}\n\nfunction renderPosts(posts) {\n  for (let i in posts) {\n    let postDiv = document.createElement(\"div\");\n    let title = document.createElement(\"h3\");\n    let text = document.createElement(\"p\");\n    let timestamp = document.createElement(\"p\");\n    let publishedDiv = document.createElement(\"div\");\n    let publishedLabel = document.createElement(\"label\");\n    let publishedInput = document.createElement(\"input\");\n    let commentsBtn = document.createElement(\"div\");\n    let deleteBtn = document.createElement(\"div\");\n    let updateBtn = document.createElement(\"div\");\n    postDiv.className = \"postDiv\";\n    title.className = \"title\";\n    text.className = \"text\";\n    timestamp.className = \"timestamp\";\n    publishedDiv.className = \"publishedDiv\";\n    publishedLabel.className = \"publishedLabel\";\n    publishedLabel.htmlFor = `published${posts[i]._id}`;\n    publishedLabel.textContent = \"Published?\";\n    publishedInput.id = `published${posts[i]._id}`;\n    publishedInput.className = \"publishedInput\";\n    publishedInput.type = \"checkbox\";\n    publishedInput.name = \"published\";\n    if (posts[i].published === true) {\n      publishedInput.checked = true;\n    } else {\n      publishedInput.checked = false;\n    }\n    publishedInput.addEventListener(\"click\", () => {\n      if (posts[i].published === true) {\n        posts[i].published = false;\n      } else {\n        posts[i].published = true;\n      }\n    });\n    commentsBtn.className = \"commentsBtn\";\n    commentsBtn.id = `${posts[i]._id}`;\n    title.textContent = posts[i].title;\n    text.textContent = posts[i].text;\n    timestamp.textContent = posts[i].timestamp;\n    commentsBtn.textContent = \"See all comments\";\n    commentsBtn.addEventListener(\"click\", (event) => {\n      (0,_index__WEBPACK_IMPORTED_MODULE_0__.showPost)(event.target.id);\n    });\n    deleteBtn.textContent = \"Delete post\";\n    deleteBtn.className = \"deleteBtn\";\n    deleteBtn.id = `${posts[i]._id}`;\n    deleteBtn.addEventListener(\"click\", (e) => {\n      (0,_index__WEBPACK_IMPORTED_MODULE_0__.deletePost)(e.target.id);\n    });\n    updateBtn.textContent = \"Update post\";\n    updateBtn.className = \"updateBtn\";\n    postDiv.appendChild(title);\n    postDiv.appendChild(text);\n    postDiv.appendChild(timestamp);\n    publishedDiv.appendChild(publishedLabel);\n    publishedDiv.appendChild(publishedInput);\n    postDiv.appendChild(publishedDiv);\n    postDiv.appendChild(commentsBtn);\n    postDiv.appendChild(deleteBtn);\n    postDiv.appendChild(updateBtn);\n    contentDiv.appendChild(postDiv);\n  }\n}\n\nfunction renderPost(post, comments) {\n  let postDiv = document.createElement(\"div\");\n  let backBtn = document.createElement(\"div\");\n  let title = document.createElement(\"h3\");\n  let text = document.createElement(\"p\");\n  let timestamp = document.createElement(\"p\");\n  let commentsHeading = document.createElement(\"h3\");\n  let addCommentBtn = document.createElement(\"div\");\n  backBtn.className = \"backBtn\";\n  postDiv.className = \"postDetailDiv\";\n  title.className = \"postDetailtitle\";\n  text.className = \"postDetailtext\";\n  timestamp.className = \"postDetailtimestamp\";\n  commentsHeading.className = \"commentsHeading\";\n  addCommentBtn.className = \"addCommentBtn\";\n  addCommentBtn.id = post._id;\n  backBtn.textContent = \"Back to all posts\";\n  title.textContent = post.title;\n  text.textContent = post.text;\n  timestamp.textContent = post.timestamp;\n  commentsHeading.textContent = \"Comments\";\n  addCommentBtn.textContent = \"Add a comment\";\n  backBtn.addEventListener(\"click\", () => {\n    (0,_index__WEBPACK_IMPORTED_MODULE_0__.createPosts)();\n  });\n  addCommentBtn.addEventListener(\"click\", (event) => {\n    addCommentForm(event.target.id);\n  });\n  postDiv.appendChild(backBtn);\n  postDiv.appendChild(title);\n  postDiv.appendChild(text);\n  postDiv.appendChild(timestamp);\n  postDiv.appendChild(commentsHeading);\n  postDiv.appendChild(addCommentBtn);\n  let commentsDiv = document.createElement(\"div\");\n  for (let i in comments) {\n    let commentDiv = document.createElement(\"div\");\n    commentDiv.className = \"commentDiv\";\n    let commentText = document.createElement(\"p\");\n    let commentUsername = document.createElement(\"p\");\n    let commentTimestamp = document.createElement(\"p\");\n    commentText.className = \"commentText\";\n    commentUsername.className = \"commentUsername\";\n    commentTimestamp.className = \"commentTimestamp\";\n    commentText.textContent = comments[i].text;\n    commentUsername.textContent = comments[i].username;\n    commentTimestamp.textContent = comments[i].timestamp;\n    commentDiv.appendChild(commentText);\n    commentDiv.appendChild(commentUsername);\n    commentDiv.appendChild(commentTimestamp);\n    postDiv.appendChild(commentDiv);\n  }\n  contentDiv.appendChild(postDiv);\n  postDiv.appendChild(commentsDiv);\n}\n\nfunction addCommentForm(id) {\n  contentDiv.textContent = \"\";\n  let addCommentHeading = document.createElement(\"h4\");\n  let backBtn = document.createElement(\"div\");\n  let form = document.createElement(\"form\");\n  let textInputDiv = document.createElement(\"div\");\n  let textInputLabel = document.createElement(\"label\");\n  let textInput = document.createElement(\"input\");\n  let usernameInputDiv = document.createElement(\"div\");\n  let usernameInputLabel = document.createElement(\"label\");\n  let usernameInput = document.createElement(\"input\");\n  let submitBtn = document.createElement(\"button\");\n  addCommentHeading.className = \"addCommentHeading\";\n  addCommentHeading.textContent = \"Add a comment\";\n  backBtn.className = \"backBtn\";\n  backBtn.textContent = \"Back to post\";\n  form.id = \"addCommentForm\";\n  form.method = \"POST\";\n  form.action = \"http://localhost:3000/blog/posts/\" + id + \"/comments\";\n  form.onsubmit = (event) => {\n    let text = textInput.value;\n    let username = usernameInput.value;\n    (0,_index__WEBPACK_IMPORTED_MODULE_0__.submitCommentForm)(event, id, text, username);\n  };\n  textInputDiv.className = \"commentInputDiv\";\n  textInputLabel.className = \"commentInputLabel\";\n  textInputLabel.htmlFor = \"text\";\n  textInputLabel.textContent = \"Your comment:\";\n  textInput.className = \"commentInput\";\n  textInput.type = \"text\";\n  textInput.name = \"text\";\n  textInput.id = \"text\";\n  usernameInputDiv.className = \"commentInputDiv\";\n  usernameInputLabel.className = \"commentInputLabel\";\n  usernameInputLabel.htmlFor = \"username\";\n  usernameInputLabel.textContent = \"Your username:\";\n  usernameInput.className = \"commentInput\";\n  usernameInput.type = \"text\";\n  usernameInput.name = \"username\";\n  usernameInput.id = \"username\";\n  usernameInput.autocomplete = true;\n  submitBtn.type = \"submit\";\n  submitBtn.textContent = \"Publish comment\";\n  backBtn.addEventListener(\"click\", () => {\n    (0,_index__WEBPACK_IMPORTED_MODULE_0__.showPost)(id);\n  });\n  textInputDiv.appendChild(textInputLabel);\n  textInputDiv.appendChild(textInput);\n  form.appendChild(textInputDiv);\n  usernameInputDiv.appendChild(usernameInputLabel);\n  usernameInputDiv.appendChild(usernameInput);\n  form.appendChild(usernameInputDiv);\n  form.appendChild(submitBtn);\n  contentDiv.appendChild(addCommentHeading);\n  contentDiv.appendChild(backBtn);\n  contentDiv.appendChild(form);\n}\n\n\n\n\n//# sourceURL=webpack://blog-editor/./src/render.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;